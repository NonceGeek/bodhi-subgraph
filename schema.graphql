# Bodhi
type Create @entity(immutable: true) {
  id: Bytes!
  assetId: BigInt! # uint256
  sender: Bytes! # address
  arTxId: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Remove @entity(immutable: true) {
  id: Bytes!
  assetId: BigInt! # uint256
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Trade @entity(immutable: true) {
  id: Bytes!
  tradeType: Int! # uint8
  assetId: BigInt! # uint256
  asset: Asset!
  user: User! # address
  tokenAmount: BigDecimal!
  ethAmount: BigDecimal!
  creatorFee: BigDecimal!
  price: BigDecimal!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  assetId: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type User @entity {
  id: ID!
  address: Bytes! # address
  creatorProfit: BigDecimal!
  tradingPnl: BigDecimal!
  totalTrades: BigInt!
  assets: [UserAsset!]! @derivedFrom(field: "user")
  trades: [Trade!]! @derivedFrom(field: "user")
}

type UserAsset @entity {
  id: ID! # `user.id.concat(asset.id)`
  assetId: BigInt!
  user: User!
  asset: Asset!
  amount: BigDecimal!
  avgPrice: BigDecimal!
}

type Asset @entity {
  id: ID!
  assetId: BigInt!
  arTxId: String
  creator: User
  createdAt: BigInt!
  totalSupply: BigDecimal!
  totalTrades: BigInt!
  totalFees: BigDecimal!
  totalVolume: BigDecimal!
  totalHolders: BigInt!
  removed: Boolean!
  holders: [UserAsset!]! @derivedFrom(field: "asset")
}

# Space
type SpaceCreateEvent @entity(immutable: true) {
  id: Bytes!
  spaceId: BigInt! # uint256
  spaceAddress: Bytes! # address
  assetId: BigInt! # uint256
  creator: Bytes! # address
  spaceName: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SpacePostCreateEvent @entity(immutable: true) {
  id: Bytes!
  space: Space!
  spaceId: BigInt! # uint256, for query
  parentId: BigInt! # uint256
  assetId: BigInt! # uint256
  creator: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SpacePostRemoveEvent @entity(immutable: true) {
  id: Bytes!
  space: Space!
  spaceId: BigInt! # uint256, for query
  assetId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Space @entity {
  id: ID! # space contract address
  spaceId: BigInt!
  spaceName: String!
  spaceAddress: Bytes! # address
  creator: User!
  asset: Asset!
  user: User! # space as user (for revenue)
  totalPosts: BigInt!
}

type SpacePost @entity {
  id: ID! # asset id
  assetId: BigInt! # for sorting (latest)
  spaceId: BigInt!
  asset: Asset!
  creator: User!
  isRoot: Boolean!
  parentId: BigInt!
  parent: SpacePost
  rootId: BigInt!
  totalReplies: BigInt!
  removedFromSpace: Boolean!
  children: [SpacePost!]! @derivedFrom(field: "parent")
}
