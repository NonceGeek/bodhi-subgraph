
type Create @entity(immutable: true) {
  id: Bytes!
  assetId: BigInt! # uint256
  sender: Bytes! # address
  arTxId: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Remove @entity(immutable: true) {
  id: Bytes!
  assetId: BigInt! # uint256
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Trade @entity(immutable: true) {
  id: Bytes!
  tradeType: Int! # uint8
  assetId: BigInt! # uint256
  sender: Bytes! # address
  tokenAmount: BigInt! # uint256
  ethAmount: BigInt! # uint256
  creatorFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  Bodhi_id: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type User @entity {
  id: ID!
  address: Bytes! # address
  assets: [UserAsset!]! @derivedFrom(field: "user")
}

type UserAsset @entity {
  id: ID! # `user.id.concat(asset.id)`
  user: User!
  asset: Asset!
  amount: BigInt!
}

type Asset @entity {
  id: ID!
  arTxId: String
  creator: User
  totalSupply: BigInt!
  totalTrades: BigInt!
  totalFees: BigDecimal!
  totalVolume: BigDecimal!
  holders: [UserAsset!]! @derivedFrom(field: "asset")
}
